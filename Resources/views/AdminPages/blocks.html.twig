{% extends 'NSAdminBundle::layout.html.twig' %}

{% block javascripts %}
	{{ parent() }}

	<script type="text/javascript">
		$(function(){
			// adds new block
			var fnAddBlock = function(blockType, areaName, pageId, position, callback) {
				$('#ns-loader').animate({'opacity': 1});
				$.ajax({
					'url': '{{ url('ns_admin_bundle', { adminBundle: 'NSCmsBundle', adminController: 'blocks', adminAction: 'ajaxAdd' }) }}',
					'data': {
						blockType: blockType,
						areaName:  areaName,
						pageId:    pageId,
						position:  position
					}
				})
				.done(function(res){
					if (res && typeof(res.error) != 'undefined') {
						throw res.error;
					}
					callback(res.id, res.title);
				})
				.always(function(){
					$('#ns-loader').animate({'opacity': 0});
				});
			};

			// reorders block
			var fnReorderBlock = function(blockId, areaName, pageId, position) {
				$('#ns-loader').animate({'opacity': 1});
				$.ajax({
					'url': '{{ url('ns_admin_bundle', { adminBundle: 'NSCmsBundle', adminController: 'blocks', adminAction: 'ajaxReorder' }) }}',
					'data': {
						blockId:   blockId,
						areaName:  areaName,
						pageId:    pageId,
						position:  position
					}
				})
				.done(function(res){
					if (res && typeof(res.error) != 'undefined') {
						throw res.error;
					}
				})
				.always(function(){
					$('#ns-loader').animate({'opacity': 0});
				});
			};

			// removes block
			var fnDeleteBlock = function(blockId, callback) {
				$('#ns-loader').animate({'opacity': 1});
				$.ajax({
					'url': '{{ url('ns_admin_bundle', { adminBundle: 'NSCmsBundle', adminController: 'blocks', adminAction: 'ajaxDelete' }) }}',
					'data': {
						blockId:   blockId
					}
				})
				.done(function(res){
					if (res && typeof(res.error) != 'undefined') {
						throw res.error;
					}
					callback();
				})
				.always(function(){
					$('#ns-loader').animate({'opacity': 0});
				});
			};

			// clones block
			var fnCloneBlock = function(blockId, callback) {
				$('#ns-loader').animate({'opacity': 1});
				$.ajax({
					'url': '{{ url('ns_admin_bundle', { adminBundle: 'NSCmsBundle', adminController: 'blocks', adminAction: 'ajaxClone' }) }}',
					'data': {
						blockId:   blockId
					}
				})
				.done(function(res){
					if (res && typeof(res.error) != 'undefined') {
						throw res.error;
					}
					callback(res.id, res.title);
				})
				.always(function(){
					$('#ns-loader').animate({'opacity': 0});
				});
			};

			/**
			 * Delete handler
			 * @return {Boolean}
			 */
			var fnDeleteBlockHandler = function() {
				if (!confirm('Вы уверены, что хотите удалить блок?')) {
					return false;
				}

				var block = $(this).parents('.block-type');
				fnDeleteBlock(block.attr('data-id'), function(){
					block.remove();
				});

				return false;
			};

			/**
			 * Update handler
			 * @return {Boolean}
			 */
			var fnUpdateBlockHandler = function() {
				var blockId = $(this).parents('.block-type').attr('data-id');
				location.href = '{{ url('ns_admin_bundle', { adminBundle: 'NSCmsBundle', adminController: 'blocks', adminAction: 'settings' }) }}?blockId=' + blockId + '&redirect=' + location.href;
				return false;
			};

            /**
             * Clone handler
             */
            var fnCloneBlockHandler = function(){
                var block = $(this).parents('.block-type');
                var clone = block.clone();
                clone.insertAfter(block).attr('data-id', null).find('.title').text('...');
                fnCloneBlock(block.attr('data-id'), function(id, title){
                    clone.attr('data-id', id);
                    clone.find('.title').text(title);
                    fnAttachBlockHandlers(clone);
                });
                return false;
            };

            /**
             * Attaches block handlers
             * @param block
             */
            var fnAttachBlockHandlers = function(block){
                block = $(block || '.block-area .block-type');
                block.find('.block-remove').click(fnDeleteBlockHandler);
                block.find('.block-update').click(fnUpdateBlockHandler);
                block.find('.block-clone').click(fnCloneBlockHandler);
            };

			// sortable
			$('.block-area').sortable({
				connectWith: '.block-area',
                placeholder: 'block-type-placeholder',
				stop: function(e, ui){
					var areaName = ui.item.parents('.block-area').attr('data-name'),
						pageId   = {{ page.id }},
						position = ui.item.parents('.block-area').find('.block-type').index(ui.item) + 1;
                    console.log(position);

					// real block, reordering
					if (ui.item.attr('data-id')) {
						fnReorderBlock(ui.item.attr('data-id'), areaName, pageId, position);
					}

					// new block, adding
					else {
						ui.item.find('.title').text('...');
						fnAddBlock(ui.item.attr('data-name'), areaName, pageId, position, function(id, title){
							ui.item.attr('data-id', id);
							ui.item.find('.title').text(title);
						});
                        fnAttachBlockHandlers(ui.item);
					}
				}
			});

			// draggable
			$('.ns-block-types .block-type').draggable({
				connectToSortable: '.block-area',
				revert: 'invalid',
				revertDuration: 200,
				helper: 'clone'
			});

            // attaching block handlers
            fnAttachBlockHandlers();
		});
	</script>
{% endblock %}

{# BLOCK (OR BLOCK TYPE) TEMPLATE #}
{% macro block_item(id, name, title) %}
	<div class="block-type"
		{%- if id %} data-id="{{ id }}"{% endif %}
		{%- if name %} data-name="{{ name }}"{% endif %}>
		<i class="icon-th-large"></i>
		<span class="title">{{ title }}</span>
		<div class="btn-group pull-right">
			<a href="#" class="btn btn-mini block-clone" title="Клонировать блок"><i class="icon-plus"></i></a>
			<a href="#" class="btn btn-mini block-update"><i class="icon-wrench"></i></a>
			<a href="#" class="btn btn-mini block-remove"><i class="icon-remove"></i></a>
		</div>
	</div>
{% endmacro %}

{% block content %}
	<h3>Управление страницами</h3>

	<style type="text/css">
		.block-area {
			border: dashed 3px #eee;
			border-radius: 10px;
			margin: 0 0 20px 0;
            min-height: 30px;
			overflow: hidden;
			padding: 10px;
		}
		.block-type {
			border: solid 1px transparent;
			cursor: move;
			height: 22px;
			padding: 3px;
            position: relative;
		}
		.block-type:hover {
			background: #fff;
			border: solid 1px #CCC;
			border-radius: 5px;
		}
		.block-type .btn-group {
			display: none;
            position: absolute;
            right: 3px;
		}
		.block-area .block-type:hover {
			background: #f5f5f5;
		}
		.block-area .block-type:hover .btn-group {
			display: inline;
		}
		.block-area.fixed {
			background: #f9f9f9 url('/bundles/nsadmin/images/ps_neutral.png');
		}
        .block-type-placeholder {
            background: #f9f9f9;
            border: solid 1px #f5f5f5;
            border-radius: 5px;
            height: 22px;
            padding: 3px;
            width:100%;
        }

	</style>

	<div class="row">
		<div class="span3">
			{{ render(controller('NSCmsBundle:AdminPages:blockPagesTree')) }}
		</div>
		<div class="span9">
			{% include 'NSCmsBundle:AdminPages:block-page-tabs.html.twig' with {active: 'blocks', pageId: page.id} %}

			<div class="row">
				<div class="span6">
					{% for row in areaRows %}
                        <div class="row">
                            {% for area in row %}
                                <div class="span{{ 6/row|length }}">
                                    <div class="block-area-container{% if area.fixed %} fixed{% endif %}">
                                        <h4>{{ area.title }}</h4>
                                        <div class="block-area{% if area.fixed %} fixed{% endif %}" data-name="{{ area.name }}">
                                            {% for block in blocks %}
                                                {% if block.areaName == area.name %}
                                                    {{ _self.block_item(block.id, null, block.title) }}
                                                {% endif %}
                                            {% endfor %}
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
					{% endfor %}
				</div>
				<div class="span3">
					<div class="well ns-block-types">
						{% set bundle = null %}
						{% for blockType in blockTypes %}
							{% if bundle != blockType.bundle %}
								{% set bundle = blockType.bundle %}
								<h4>{{ bundle.title is defined ? bundle.title : bundle.name }}</h4>
							{% endif %}
							{{ _self.block_item(null, blockType.name, blockType.title) }}
						{% endfor %}
					</div>
                    <div class="well">
                        <h4>Буфер обмена</h4>
                        <div class="block-area">
                            {% for block in buffered %}
                                {{ _self.block_item(block.id, null, block.title) }}
                            {% endfor %}
                        </div>
                    </div>
				</div>
			</div>
		</div>
	</div>
{% endblock %}
